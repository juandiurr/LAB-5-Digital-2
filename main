/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t hola = 0;
uint8_t hola2 = 0; //ctrl + espacio
uint8_t hola3 = 0; //ctrl + espacio
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
		  HAL_Delay(300);
		  hola = 1;
	  }
	  if (hola == 1){
		 /* HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0);*/
		  //iniciar secuencia del semaforo
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
		  HAL_Delay(3000);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		  HAL_Delay(3000);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		  hola = 2;
		  //setear todos los pines en 0

	  }
	  do{//secuencia de carrera
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
		  HAL_Delay(100);
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET){
			  HAL_Delay(300);
			  hola2++;
		  }
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET){
			  HAL_Delay(300);
			  hola3++;
		  }
		  if (hola2 == 1){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);

		  }else if(hola2 == 2){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
		  }else if(hola2 == 3){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
		  }else if(hola2 == 4){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
		  }else if(hola2 == 5){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
		  }else if(hola2 == 6){
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
		  }else if(hola2 == 7){
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
		  }else if(hola2 == 8){
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			  hola = 0;
			  hola2 = 0;
			  hola3 = 0;
		  }
		  if (hola3 == 1){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 1);
		  }else if(hola3 == 2){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
		  }else if(hola3 == 3){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
		  }else if(hola3 == 4){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
		  }else if(hola3 == 5){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
		  }else if(hola3 == 6){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
		  }else if(hola3 == 7){
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
		  }else if(hola3 == 8){
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			  hola = 0;
			  hola2 = 0;
			  hola3 = 0;

		  }
	  }while (hola == 2);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDrojo_Pin|LEDamarillo_Pin|LEDverde_Pin|J1L5_Pin
                          |J1L4_Pin|J1L3_Pin|J1L2_Pin|J1L1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|J2L8_Pin|J2L7_Pin|J1L8_Pin
                          |J1L7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J2L6_Pin|J2L5_Pin|J2L4_Pin|J2L3_Pin
                          |J2L2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(J1L6_GPIO_Port, J1L6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : START_Pin J1_Pin J2_Pin */
  GPIO_InitStruct.Pin = START_Pin|J1_Pin|J2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LEDrojo_Pin LEDamarillo_Pin LEDverde_Pin J1L5_Pin
                           J1L4_Pin J1L3_Pin J1L2_Pin J1L1_Pin */
  GPIO_InitStruct.Pin = LEDrojo_Pin|LEDamarillo_Pin|LEDverde_Pin|J1L5_Pin
                          |J1L4_Pin|J1L3_Pin|J1L2_Pin|J1L1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 J2L8_Pin J2L7_Pin J1L8_Pin
                           J1L7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|J2L8_Pin|J2L7_Pin|J1L8_Pin
                          |J1L7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : J2L6_Pin J2L5_Pin J2L4_Pin J2L3_Pin
                           J2L2_Pin */
  GPIO_InitStruct.Pin = J2L6_Pin|J2L5_Pin|J2L4_Pin|J2L3_Pin
                          |J2L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : J1L6_Pin */
  GPIO_InitStruct.Pin = J1L6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(J1L6_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
